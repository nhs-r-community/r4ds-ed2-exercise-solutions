[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R for Data Science (2nd edition) Unofficial Exercise Solutions",
    "section": "",
    "text": "About this book\nThis unofficial book is inspired by the R for Data Science Exercise Solutions and is an updated version in line with the second edition release of R for Data Science, also referred to in the short form as R4DS, by Hadley Wickham, Mine Çetinkaya-Rundel, and Garrett Grolemund.\nLike the two books mentioned, this is divided into the same sections with the same numbering for exercises. Sections without exercises will appear but with the callout block:\nTo attempt to make this book closely referenced to the original there will be hyperlinks for the R4DS (2e) chapter numbers and these may break if the book changes.\nAll questions from the R4DS book will be quoted:"
  },
  {
    "objectID": "index.html#githubquarto-scripts",
    "href": "index.html#githubquarto-scripts",
    "title": "R for Data Science (2nd edition) Unofficial Exercise Solutions",
    "section": "GitHub/Quarto scripts",
    "text": "GitHub/Quarto scripts\nThe book is built using the code names that follow the R4DS names which are listed in the corresponding _quarto.yml."
  },
  {
    "objectID": "index.html#formatting",
    "href": "index.html#formatting",
    "title": "R for Data Science (2nd edition) Unofficial Exercise Solutions",
    "section": "Formatting",
    "text": "Formatting\nThis book follows the NHS-R Way code book style with each sentence having a new line following The Turing Way. This will only apply, however, to new content and does not extend to the quoted text from R4DS (2e).\nQuoted text will be exact and so may be in US spelling, whereas new content is likely to be UK English spelling, for example: summarise() instead of summarize."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "Note\n\n\n\nThere are no exercises in this section."
  },
  {
    "objectID": "data-visualize.html#section",
    "href": "data-visualize.html#section",
    "title": "2  Data visualization",
    "section": "2.2.5",
    "text": "2.2.5\n\n\nHow many rows are in penguins?\nHow many columns?\n\n\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\nIt’s possible to see the number of rows and columns by typing:\n\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\nbut to get a code output:\n\nnrow(penguins)\n\n[1] 344\n\nncol(penguins)\n\n[1] 8\n\n\nand to find the dimensions of an object (the columns and rows):\n\ndim(penguins)\n\n[1] 344   8\n\n\n\n\nWhat does the bill_depth_mm variable in the penguins data frame describe? Read the help for ?penguins to find out.\n\n\nThere is a nice description and picture on Allison Horst’s GitHub.\n\n\nMake a scatterplot of bill_depth_mm vs. bill_length_mm. That is, make a scatterplot with bill_depth_mm on the y-axis and bill_length_mm on the x-axis. Describe the relationship between these two variables.\n\n\nBecause this pipes the data into the chart the parameter data = penguins is redundant. It is commented out just to show where it would be if it hadn’t been piped. By piping the data into the plotting code it means that if you type x = then tab you get a list of the potential columns you can use in the code.\n\npenguins |&gt; \n  ggplot(#data = penguins, \n    mapping = aes(x = bill_depth_mm,\n                  y = bill_length_mm)) +\n  geom_point()\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\nWhat happens if you make a scatterplot of species vs. bill_depth_mm?\n\n\nWhen deciding which data is plotted on the y the suggestion is often to put the first on the y. The following could be either way but it does make it easier to read the species names if they are on the y axis.\n\npenguins |&gt; \n  ggplot(#data = penguins,\n    mapping = aes(x = bill_depth_mm,\n                  y = species)) +\n  geom_point()\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\nWhat might be a better choice of geom?\n\nDensity plots with a coloured line, this could be replaced with fill = species to move from the line to a more solid chart.\nlinewidth isn’t mentioned in the R4DS and in some code may be lwd or size (although that is deprecated)\n\npenguins |&gt; \n  ggplot(#data = penguins,\n         mapping = aes(x = bill_depth_mm,\n                       colour = species)) +\n  geom_density(linewidth = 2)\n\nWarning: Removed 2 rows containing non-finite values (`stat_density()`).\n\n\n\n\n\nOr a boxplot:\n\npenguins |&gt; \n  ggplot(#data = penguins,\n    mapping = aes(x = bill_depth_mm,\n                  fill = species)) +\n  geom_boxplot()\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\n\n\nWhy does the following give an error and how would you fix it?\n\n\n\nggplot(data = penguins) + \ngeom_point()\n\nGives the following error:\nError in `geom_point()`:\n! Problem while setting up geom.\nℹ Error occurred in the 1st layer.\nCaused by error in `compute_geom_1()`:\n! `geom_point()` requires the following missing\n  aesthetics: x and y\nRun `rlang::last_trace()` to see where the error occurred.\nThe error is pointing out there are no aesthetics added, including x and y axis information.\n\npenguins |&gt; \n  ggplot(mapping = aes(x = bill_depth_mm,\n                       y = body_mass_g)) + \n  geom_point()\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\nWhat does the na.rm argument do in geom_point()? What is the default value of the argument? Create a scatterplot where you successfully use this argument set to TRUE.\n\n\nThere are missing data points (either on the x or the y) so gives a warning in the console along with the plotted chart:\n\nWarning message: Removed 2 rows containing missing values (geom_point()).\n\nIt is saying that the missing value data is dropped.\nAdding na.rm = TRUE into the geom_point() removes these missing value data poins and so there is no longer a warning printed in the console.\nThe default value of na.rm = is FALSE.\n\npenguins |&gt; \n  ggplot(mapping = aes(x = bill_depth_mm,\n                       y = body_mass_g)) + \n  geom_point(na.rm = TRUE)\n\n\n\n\n\n\nAdd the following caption to the plot you made in the previous exercise: “Data come from the palmerpenguins package.” Hint: Take a look at the documentation for labs().\n\n\n\npenguins |&gt; \n  ggplot(mapping = aes(x = bill_depth_mm,\n                       y = body_mass_g)) + \n  geom_point(na.rm = TRUE) + \n  labs(caption = \"Data come from the palmerpenguins package.\")\n\n\n\n\n\n\nRecreate the following visualization. What aesthetic should bill_depth_mm be mapped to? And should it be mapped at the global level or at the geom level?\n\n\nMapped to the geom_level:\n\npenguins |&gt; \n  ggplot(mapping = aes(x = flipper_length_mm,\n                       y = body_mass_g)) + \n  geom_point(aes(colour = bill_depth_mm),\n             na.rm = TRUE) +\n  geom_smooth(na.rm = TRUE)\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\nBut mapping to the global level gives a warning as the colour is also being applied to the geom_smoothand subsequently gets dropped:\n\npenguins |&gt; \n  ggplot(mapping = aes(x = flipper_length_mm,\n                       y = body_mass_g,\n                       colour = bill_depth_mm)) + \n  geom_point(na.rm = TRUE) +\n  geom_smooth(na.rm = TRUE)\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\nWarning: The following aesthetics were dropped during statistical transformation: colour\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\n\n\n\n\n\n\nRun this code in your head and predict what the output will look like. Then, run the code in R and check your predictions.\n\nThe chart will have dots with flipper length along the bottom and body mass along the side. The dots will be coloured by the islands and there will be as many curvy lines as there are distinct islands but with no grey extensions/bits to the lines.\n\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g, color = island)\n) +\n  geom_point() +\n  geom_smooth(se = FALSE)\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\nWill these two graphs look different? Why/why not?\n\nThey are the same because the first has the data and aes() which will be available to the geom() functions. The second is a repetition of the code leaving the global ggplot() empty but giving the same chart.\n\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g)\n) +\n  geom_point() +\n  geom_smooth()\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\nggplot() +\n  geom_point(\n    data = penguins,\n    mapping = aes(x = flipper_length_mm, y = body_mass_g)\n  ) +\n  geom_smooth(\n    data = penguins,\n    mapping = aes(x = flipper_length_mm, y = body_mass_g)\n  )\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_smooth()`).\nRemoved 2 rows containing missing values (`geom_point()`)."
  },
  {
    "objectID": "data-visualize.html#section-1",
    "href": "data-visualize.html#section-1",
    "title": "2  Data visualization",
    "section": "2.4.3",
    "text": "2.4.3\n\n\nMake a bar plot of species of penguins, where you assign species to the y aesthetic. How is this plot different?\n\n\nThe plot appears to be ‘flipped’ so the species are appearing on the left side (y axis).\n\nggplot(data = penguins,\n       aes(y = species))+\n  geom_bar()\n\n\n\n\nThis used to be done previously using coord_flip() which is still in {ggplot2}.\n\n\nHow are the following two plots different? Which aesthetic, color or fill, is more useful for changing the color of bars?\n\n\n\nggplot(penguins, aes(x = species)) +\n  geom_bar(color = \"red\")\n\nggplot(penguins, aes(x = species)) +\n  geom_bar(fill = \"red\")\n\n\n\nWhat does the bins argument in geom_histogram() do?\n\n\n\nggplot(penguins, aes(x = body_mass_g)) +\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_bin()`).\n\n\n\n\n\nBins represents the number of “buckets” that data is cut into, automatically this is 30.\nTo remove the warning message:\n\nggplot(penguins, aes(x = body_mass_g)) +\n  geom_histogram(bins = 10,\n                 na.rm = TRUE)\n\n\n\n\n\n\nMake a histogram of the carat variable in the diamonds dataset that is available when you load the tidyverse package. Experiment with different binwidths. What binwidth reveals the most interesting patterns?\n\n\n\nggplot(diamonds, aes(x = carat)) +\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nBins changes the “buckets” or the number of cuts made to the data:\n\nggplot(diamonds, aes(x = carat)) +\n  geom_histogram(bins = 3)\n\n\n\n\nWhilst binwidth changes the size of the bin, cuts or “buckets”:\n\nggplot(diamonds, aes(x = carat)) +\n  geom_histogram(binwidth = 0.5)"
  },
  {
    "objectID": "data-visualize.html#section-2",
    "href": "data-visualize.html#section-2",
    "title": "2  Data visualization",
    "section": "2.5.5",
    "text": "2.5.5\n\n\nThe mpg data frame that is bundled with the ggplot2 package contains 234 observations collected by the US Environmental Protection Agency on 38 car models. Which variables in mpg are categorical?\n\n\nTo see the data types you could use summary() or str() for structure:\n\nstr(ggplot2::mpg)\n\ntibble [234 × 11] (S3: tbl_df/tbl/data.frame)\n $ manufacturer: chr [1:234] \"audi\" \"audi\" \"audi\" \"audi\" ...\n $ model       : chr [1:234] \"a4\" \"a4\" \"a4\" \"a4\" ...\n $ displ       : num [1:234] 1.8 1.8 2 2 2.8 2.8 3.1 1.8 1.8 2 ...\n $ year        : int [1:234] 1999 1999 2008 2008 1999 1999 2008 1999 1999 2008 ...\n $ cyl         : int [1:234] 4 4 4 4 6 6 6 4 4 4 ...\n $ trans       : chr [1:234] \"auto(l5)\" \"manual(m5)\" \"manual(m6)\" \"auto(av)\" ...\n $ drv         : chr [1:234] \"f\" \"f\" \"f\" \"f\" ...\n $ cty         : int [1:234] 18 21 20 21 16 18 18 18 16 20 ...\n $ hwy         : int [1:234] 29 29 31 30 26 26 27 26 25 28 ...\n $ fl          : chr [1:234] \"p\" \"p\" \"p\" \"p\" ...\n $ class       : chr [1:234] \"compact\" \"compact\" \"compact\" \"compact\" ...\n\n\nCategorical would be chr or character type so that would be manufacture, model, trans, drv, fl and class.\n\nWhich variables are numerical? (Hint: Type ?mpg to read the documentation for the dataset.) How can you see this information when you run mpg?\n\nNumerical is listed as int for integer or num for number and that would be displ, year, cyl, cty and hwy.\n\n\nMake a scatterplot of hwy vs. displ using the mpg data frame. Next, map a third, numerical variable to color, then size, then both color and size, then shape. How do these aesthetics behave differently for categorical vs. numerical variables?\n\n\nIn the scatterplot of hwy vs. displ, what happens if you map a third variable to linewidth?\n\n\nWhat happens if you map the same variable to multiple aesthetics?\n\n\nMake a scatterplot of bill_depth_mm vs. bill_length_mm and color the points by species. What does adding coloring by species reveal about the relationship between these two variables? What about faceting by species?\n\n\nWhy does the following yield two separate legends? How would you fix it to combine the two legends?\n\n\n\nggplot(\n  data = penguins,\n  mapping = aes(\n    x = bill_length_mm, y = bill_depth_mm, \n    color = species, shape = species\n  )\n) +\n  geom_point() +\n  labs(color = \"Species\")\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\nCreate the two following stacked bar plots. Which question can you answer with the first one? Which question can you answer with the second one?\n\n\n\nggplot(penguins, aes(x = island, fill = species)) +\n  geom_bar(position = \"fill\")\n\n\n\nggplot(penguins, aes(x = species, fill = island)) +\n  geom_bar(position = \"fill\")"
  },
  {
    "objectID": "data-visualize.html#section-3",
    "href": "data-visualize.html#section-3",
    "title": "2  Data visualization",
    "section": "2.6.1",
    "text": "2.6.1\n\n\nRun the following lines of code. Which of the two plots is saved as mpg-plot.png? Why?\n\n\n\nggplot(mpg, aes(x = class)) +\n  geom_bar()\nggplot(mpg, aes(x = cty, y = hwy)) +\n  geom_point()\nggsave(\"mpg-plot.png\")\n\nThe second code is saved because it was the last code run.\n\n\nWhat do you need to change in the code above to save the plot as a PDF instead of a PNG? How could you find out what types of image files would work in ggsave()?\n\n\nTo save as a pdf the code needs to be changed from .png to .pdf:\n\nggsave(\"mpg-plot.pdf\")"
  },
  {
    "objectID": "workflow.html#section",
    "href": "workflow.html#section",
    "title": "3  Workflow: basics",
    "section": "3.5",
    "text": "3.5\n\n\nWhy does this code not work?\n\n\n\nmy_variable &lt;- 10\nmy_varıable\n\nError in eval(expr, envir, enclos): object 'my_varıable' not found\n\n\nThe i is dotless in the call of my_variable and so doesn’t match.\n\n\n\n\n\n\nQuarto chunk error: true\n\n\n\n\n\nIn Quarto this chunk ran using error: true which shows the error in the book, useful for instances where code errors are shared in Quarto presentations or on websites!\n\n\n\n\n\nTweak each of the following R commands so that they run correctly:\n\n\n\nlibary(todyverse)\n\nggplot(dTA = mpg) + \n  geom_point(maping = aes(x = displ y = hwy)) +\n  geom_smooth(method = \"lm)\n\nCorrected:\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy)) +\n  geom_smooth(mapping = aes(x = displ, y = hwy),\n              method = lm)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nThere are a lot of corrections needed in this code. It includes:\n\ntodyverse should be tidyverse)\ndTA instead of data)\nmaping instead of mapping\nmissing , between x = displ and y = hwy\na \" before \"lm\n\n\n\n\n\n\n\nQuotations around the lm in method = (note)\n\n\n\n\n\n\"lm\" will work but RStudio will flash up an error in the margin saying unexpected token if you click on the red circle with white cross.\n\n\n\n\ngeom_smooth() also requires its own mapping information as the aes() isn’t available to that line. If this were global it would be:\n\n\nlibrary(tidyverse)\n\nggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + \n  geom_point() +\n  geom_smooth(method = lm)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\nPress Option + Shift + K / Alt + Shift + K. What happens?\n\n\nThe keyboard shortcuts overlay menu comes up in RStudio.\n\nHow can you get to the same place using the menus?\n\nTools/Keyboards Shortcuts Help\n\n\nLet’s revisit an exercise from the https://r4ds.hadley.nz/data-visualize#sec-ggsave. Run the following lines of code.\n\n\n\nmy_bar_plot &lt;- ggplot(mpg, aes(x = class)) +\n geom_bar()\nmy_scatter_plot &lt;- ggplot(mpg, aes(x = cty, y = hwy)) +\n geom_point()\nggsave(filename = \"mpg-plot.png\", plot = my_bar_plot)\n\n\nWhich of the two plots is saved as mpg-plot.png?\n\nThe bar plot from the object my_bar_plot is saved.\n\nWhy?\n\nThis has been explicitly detailed in the ggsave() function. Both plots are also saved as objects (https://r4ds.hadley.nz/workflow-basics#sec-whats-in-a-name) so they can be referred to in the function."
  },
  {
    "objectID": "data-transform.html#section",
    "href": "data-transform.html#section",
    "title": "4  Data transformation",
    "section": "4.2.5",
    "text": "4.2.5\n\n\nIn a single pipeline for each condition, find all flights that meet the condition:\n\n\nThe following libraries will be needed:\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(nycflights13)\n\n\nHad an arrival delay of two or more hours\n\nThe column arr_delay looks like the column to use but to confirm what type of data it contains we can see the package documentation with the following code:\n\n?flights\n\narr_delay is in minutes and the minus time shows when the departures were early so code would be:\n\nflights |&gt; \n  filter(arr_delay &gt; 120)\n\n# A tibble: 10,034 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      811            630       101     1047            830\n 2  2013     1     1      848           1835       853     1001           1950\n 3  2013     1     1      957            733       144     1056            853\n 4  2013     1     1     1114            900       134     1447           1222\n 5  2013     1     1     1505           1310       115     1638           1431\n 6  2013     1     1     1525           1340       105     1831           1626\n 7  2013     1     1     1549           1445        64     1912           1656\n 8  2013     1     1     1558           1359       119     1718           1515\n 9  2013     1     1     1732           1630        62     2028           1825\n10  2013     1     1     1803           1620       103     2008           1750\n# ℹ 10,024 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\nFlew to Houston (IAH or HOU)\n\nLooking at the column data with unique() which is a base R function to show the distinct values:\n\nunique(flights$dest)\n\n  [1] \"IAH\" \"MIA\" \"BQN\" \"ATL\" \"ORD\" \"FLL\" \"IAD\" \"MCO\" \"PBI\" \"TPA\" \"LAX\" \"SFO\"\n [13] \"DFW\" \"BOS\" \"LAS\" \"MSP\" \"DTW\" \"RSW\" \"SJU\" \"PHX\" \"BWI\" \"CLT\" \"BUF\" \"DEN\"\n [25] \"SNA\" \"MSY\" \"SLC\" \"XNA\" \"MKE\" \"SEA\" \"ROC\" \"SYR\" \"SRQ\" \"RDU\" \"CMH\" \"JAX\"\n [37] \"CHS\" \"MEM\" \"PIT\" \"SAN\" \"DCA\" \"CLE\" \"STL\" \"MYR\" \"JAC\" \"MDW\" \"HNL\" \"BNA\"\n [49] \"AUS\" \"BTV\" \"PHL\" \"STT\" \"EGE\" \"AVL\" \"PWM\" \"IND\" \"SAV\" \"CAK\" \"HOU\" \"LGB\"\n [61] \"DAY\" \"ALB\" \"BDL\" \"MHT\" \"MSN\" \"GSO\" \"CVG\" \"BUR\" \"RIC\" \"GSP\" \"GRR\" \"MCI\"\n [73] \"ORF\" \"SAT\" \"SDF\" \"PDX\" \"SJC\" \"OMA\" \"CRW\" \"OAK\" \"SMF\" \"TUL\" \"TYS\" \"OKC\"\n [85] \"PVD\" \"DSM\" \"PSE\" \"BHM\" \"CAE\" \"HDN\" \"BZN\" \"MTJ\" \"EYW\" \"PSP\" \"ACK\" \"BGR\"\n [97] \"ABQ\" \"ILM\" \"MVY\" \"SBN\" \"LEX\" \"CHO\" \"TVC\" \"ANC\" \"LGA\"\n\n\nAlso possible in {dplyr} using distinct():\n\nflights |&gt; \n  distinct(dest)\n\n# A tibble: 105 × 1\n   dest \n   &lt;chr&gt;\n 1 IAH  \n 2 MIA  \n 3 BQN  \n 4 ATL  \n 5 ORD  \n 6 FLL  \n 7 IAD  \n 8 MCO  \n 9 PBI  \n10 TPA  \n# ℹ 95 more rows\n\n\n\nflights |&gt; \n  filter(dest %in% c(\"IAH\", \"HOU\"))\n\n# A tibble: 9,313 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      623            627        -4      933            932\n 4  2013     1     1      728            732        -4     1041           1038\n 5  2013     1     1      739            739         0     1104           1038\n 6  2013     1     1      908            908         0     1228           1219\n 7  2013     1     1     1028           1026         2     1350           1339\n 8  2013     1     1     1044           1045        -1     1352           1351\n 9  2013     1     1     1114            900       134     1447           1222\n10  2013     1     1     1205           1200         5     1503           1505\n# ℹ 9,303 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nAnother way to do this, but less efficienct in code is to write:\n\nflights |&gt; \n  filter(dest == \"IAH\" | dest == \"HOU\")\n\n# A tibble: 9,313 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      623            627        -4      933            932\n 4  2013     1     1      728            732        -4     1041           1038\n 5  2013     1     1      739            739         0     1104           1038\n 6  2013     1     1      908            908         0     1228           1219\n 7  2013     1     1     1028           1026         2     1350           1339\n 8  2013     1     1     1044           1045        -1     1352           1351\n 9  2013     1     1     1114            900       134     1447           1222\n10  2013     1     1     1205           1200         5     1503           1505\n# ℹ 9,303 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nwith the | representing or.\n\nWere operated by United, American, or Delta\n\nChecking the carrier column for information that matches:\n\nunique(flights$carrier)\n\n [1] \"UA\" \"AA\" \"B6\" \"DL\" \"EV\" \"MQ\" \"US\" \"WN\" \"VX\" \"FL\" \"AS\" \"9E\" \"F9\" \"HA\" \"YV\"\n[16] \"OO\"\n\n\nThese look like codes rather than names.\nChecking the package information online https://github.com/tidyverse/nycflights13 there is a dataset for airlines:\n\n??nycflights13::airlines\n\nThis section of the book doesn’t refer to joins so presuming the exercise is requiring looking for the right codes:\n\nairlines |&gt; \n  filter(name %in% c(\"United\", \"American\", \"Delta\"))\n\n# A tibble: 0 × 2\n# ℹ 2 variables: carrier &lt;chr&gt;, name &lt;chr&gt;\n\n\nThis doesn’t bring back the right carriers but there are only 16 rows and the names should be:\n\nairlines |&gt; \n  filter(name %in% c(\"United Air Lines Inc.\", \"American Airlines Inc.\", \"Delta Air Lines Inc.\"))\n\n# A tibble: 3 × 2\n  carrier name                  \n  &lt;chr&gt;   &lt;chr&gt;                 \n1 AA      American Airlines Inc.\n2 DL      Delta Air Lines Inc.  \n3 UA      United Air Lines Inc. \n\n\n\nflights |&gt; \n  filter(carrier %in% c(\"AA\", \"DL\", \"UA\"))\n\n# A tibble: 139,504 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      554            600        -6      812            837\n 5  2013     1     1      554            558        -4      740            728\n 6  2013     1     1      558            600        -2      753            745\n 7  2013     1     1      558            600        -2      924            917\n 8  2013     1     1      558            600        -2      923            937\n 9  2013     1     1      559            600        -1      941            910\n10  2013     1     1      559            600        -1      854            902\n# ℹ 139,494 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\nDeparted in summer (July, August, and September)\n\n\nflights |&gt; \n  filter(month %in% c(7, 8, 9))\n\n# A tibble: 86,326 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     7     1        1           2029       212      236           2359\n 2  2013     7     1        2           2359         3      344            344\n 3  2013     7     1       29           2245       104      151              1\n 4  2013     7     1       43           2130       193      322             14\n 5  2013     7     1       44           2150       174      300            100\n 6  2013     7     1       46           2051       235      304           2358\n 7  2013     7     1       48           2001       287      308           2305\n 8  2013     7     1       58           2155       183      335             43\n 9  2013     7     1      100           2146       194      327             30\n10  2013     7     1      100           2245       135      337            135\n# ℹ 86,316 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nBecause these are numbers the filter can be reduced to:\n\nflights |&gt; \n  filter(month %in% 7:9)\n\n# A tibble: 86,326 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     7     1        1           2029       212      236           2359\n 2  2013     7     1        2           2359         3      344            344\n 3  2013     7     1       29           2245       104      151              1\n 4  2013     7     1       43           2130       193      322             14\n 5  2013     7     1       44           2150       174      300            100\n 6  2013     7     1       46           2051       235      304           2358\n 7  2013     7     1       48           2001       287      308           2305\n 8  2013     7     1       58           2155       183      335             43\n 9  2013     7     1      100           2146       194      327             30\n10  2013     7     1      100           2245       135      337            135\n# ℹ 86,316 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\nArrived more than two hours late, but didn’t leave late\n\n\nflights |&gt; \n  filter(dep_delay &lt;= 0,\n         arr_delay &gt; 120)\n\n# A tibble: 29 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1    27     1419           1420        -1     1754           1550\n 2  2013    10     7     1350           1350         0     1736           1526\n 3  2013    10     7     1357           1359        -2     1858           1654\n 4  2013    10    16      657            700        -3     1258           1056\n 5  2013    11     1      658            700        -2     1329           1015\n 6  2013     3    18     1844           1847        -3       39           2219\n 7  2013     4    17     1635           1640        -5     2049           1845\n 8  2013     4    18      558            600        -2     1149            850\n 9  2013     4    18      655            700        -5     1213            950\n10  2013     5    22     1827           1830        -3     2217           2010\n# ℹ 19 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\nWere delayed by at least an hour, but made up over 30 minutes in flight\n\n\nflights |&gt; \n  filter(dep_delay &gt;= 60,\n         arr_delay &lt; dep_delay - 30)\n\n# A tibble: 1,844 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1     2205           1720       285       46           2040\n 2  2013     1     1     2326           2130       116      131             18\n 3  2013     1     3     1503           1221       162     1803           1555\n 4  2013     1     3     1839           1700        99     2056           1950\n 5  2013     1     3     1850           1745        65     2148           2120\n 6  2013     1     3     1941           1759       102     2246           2139\n 7  2013     1     3     1950           1845        65     2228           2227\n 8  2013     1     3     2015           1915        60     2135           2111\n 9  2013     1     3     2257           2000       177       45           2224\n10  2013     1     4     1917           1700       137     2135           1950\n# ℹ 1,834 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nAt least an hour means 60 minutes or more so &gt;=.\n\n\nSort flights to find the flights with longest departure delays. Find the flights that left earliest in the morning.\n\n\nRather than , between the two parts this answer will require the &\n\nflights |&gt; \n  filter(dep_time &lt; 0900) |&gt; \n  arrange(desc(dep_delay))\n\n# A tibble: 79,314 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     9      641            900      1301     1242           1530\n 2  2013     7    22      845           1600      1005     1044           1815\n 3  2013    12     5      756           1700       896     1058           2020\n 4  2013     1     1      848           1835       853     1001           1950\n 5  2013     5    19      713           1700       853     1007           1955\n 6  2013    12    19      734           1725       849     1046           2039\n 7  2013    12    17      705           1700       845     1026           2020\n 8  2013    12    14      830           1845       825     1210           2154\n 9  2013     6    27      753           1830       803      937           2015\n10  2013    11     3      603           1645       798      829           1913\n# ℹ 79,304 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\nSort flights to find the fastest flights. (Hint: Try including a math calculation inside of your function.)\n\n\nWas there a flight on every day of 2013?\n\n\nWhich flights traveled the farthest distance? Which traveled the least distance?\n\n\nDoes it matter what order you used filter() and arrange() if you’re using both? Why/why not? Think about the results and how much work the functions would have to do."
  }
]