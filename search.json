[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R for Data Science (2nd edition) Unofficial Exercise Solutions",
    "section": "",
    "text": "About this book\nThis unofficial book is inspired by the R for Data Science Exercise Solutions and is an updated version in line with the second edition release of R for Data Science, also referred to in the short form as R4DS, by Hadley Wickham, Mine Çetinkaya-Rundel, and Garrett Grolemund.\nLike the two books mentioned, this is divided into the same sections with the same numbering for exercises. Sections without exercises will appear but with the callout block:\nTo attempt to make this book closely referenced to the original there will be hyperlinks for the R4DS (2e) chapter numbers and these may break if the book changes.\nAll questions from the R4DS book will be quoted:"
  },
  {
    "objectID": "index.html#githubquarto-scripts",
    "href": "index.html#githubquarto-scripts",
    "title": "R for Data Science (2nd edition) Unofficial Exercise Solutions",
    "section": "GitHub/Quarto scripts",
    "text": "GitHub/Quarto scripts\nThe book is built using the code names that follow the R4DS names which are listed in the corresponding _quarto.yml."
  },
  {
    "objectID": "index.html#formatting",
    "href": "index.html#formatting",
    "title": "R for Data Science (2nd edition) Unofficial Exercise Solutions",
    "section": "Formatting",
    "text": "Formatting\nThis book follows the NHS-R Way code book style with each sentence having a new line following The Turing Way. This will only apply, however, to new content and does not extend to the quoted text from R4DS (2e).\nQuoted text will be exact and so may be in US spelling, whereas new content is likely to be UK English spelling, for example: summarise() instead of summarize."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "Note\n\n\n\nThere are no exercises in this section."
  },
  {
    "objectID": "data-visualize.html#section",
    "href": "data-visualize.html#section",
    "title": "2  Data visualization",
    "section": "2.2.5",
    "text": "2.2.5\n\n\nHow many rows are in penguins?\nHow many columns?\n\n\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\nIt’s possible to see the number of rows and columns by typing:\n\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\nbut to get a code output:\n\nnrow(penguins)\n\n[1] 344\n\nncol(penguins)\n\n[1] 8\n\n\nand to find the dimensions of an object (the columns and rows):\n\ndim(penguins)\n\n[1] 344   8\n\n\n\n\nWhat does the bill_depth_mm variable in the penguins data frame describe? Read the help for ?penguins to find out.\n\n\nThere is a nice description and picture on Allison Horst’s GitHub.\n\n\nMake a scatterplot of bill_depth_mm vs. bill_length_mm. That is, make a scatterplot with bill_depth_mm on the y-axis and bill_length_mm on the x-axis. Describe the relationship between these two variables.\n\n\nBecause this pipes the data into the chart the parameter data = penguins is redundant. It is commented out just to show where it would be if it hadn’t been piped. By piping the data into the plotting code it means that if you type x = then tab you get a list of the potential columns you can use in the code.\n\npenguins |&gt; \n  ggplot(#data = penguins, \n    mapping = aes(x = bill_depth_mm,\n                  y = bill_length_mm)) +\n  geom_point()\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\nWhat happens if you make a scatterplot of species vs. bill_depth_mm?\n\n\nWhen deciding which data is plotted on the y the suggestion is often to put the first on the y. The following could be either way but it does make it easier to read the species names if they are on the y axis.\n\npenguins |&gt; \n  ggplot(#data = penguins,\n    mapping = aes(x = bill_depth_mm,\n                  y = species)) +\n  geom_point()\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\nWhat might be a better choice of geom?\n\nDensity plots with a coloured line, this could be replaced with fill = species to move from the line to a more solid chart.\nlinewidth isn’t mentioned in the R4DS and in some code may be lwd or size (although that is deprecated)\n\npenguins |&gt; \n  ggplot(#data = penguins,\n         mapping = aes(x = bill_depth_mm,\n                       colour = species)) +\n  geom_density(linewidth = 2)\n\nWarning: Removed 2 rows containing non-finite values (`stat_density()`).\n\n\n\n\n\nOr a boxplot:\n\npenguins |&gt; \n  ggplot(#data = penguins,\n    mapping = aes(x = bill_depth_mm,\n                  fill = species)) +\n  geom_boxplot()\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\n\n\nWhy does the following give an error and how would you fix it?\n\n\n\nggplot(data = penguins) + \ngeom_point()\n\nGives the following error:\nError in `geom_point()`:\n! Problem while setting up geom.\nℹ Error occurred in the 1st layer.\nCaused by error in `compute_geom_1()`:\n! `geom_point()` requires the following missing\n  aesthetics: x and y\nRun `rlang::last_trace()` to see where the error occurred.\nThe error is pointing out there are no aesthetics added, including x and y axis information.\n\npenguins |&gt; \n  ggplot(mapping = aes(x = bill_depth_mm,\n                       y = body_mass_g)) + \n  geom_point()\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\nWhat does the na.rm argument do in geom_point()? What is the default value of the argument? Create a scatterplot where you successfully use this argument set to TRUE.\n\n\nThere are missing data points (either on the x or the y) so gives a warning in the console along with the plotted chart:\n\nWarning message: Removed 2 rows containing missing values (geom_point()).\n\nIt is saying that the missing value data is dropped.\nAdding na.rm = TRUE into the geom_point() removes these missing value data poins and so there is no longer a warning printed in the console.\nThe default value of na.rm = is FALSE.\n\npenguins |&gt; \n  ggplot(mapping = aes(x = bill_depth_mm,\n                       y = body_mass_g)) + \n  geom_point(na.rm = TRUE)\n\n\n\n\n\n\nAdd the following caption to the plot you made in the previous exercise: “Data come from the palmerpenguins package.” Hint: Take a look at the documentation for labs().\n\n\n\npenguins |&gt; \n  ggplot(mapping = aes(x = bill_depth_mm,\n                       y = body_mass_g)) + \n  geom_point(na.rm = TRUE) + \n  labs(caption = \"Data come from the palmerpenguins package.\")\n\n\n\n\n\n\nRecreate the following visualization. What aesthetic should bill_depth_mm be mapped to? And should it be mapped at the global level or at the geom level?\n\n\nMapped to the geom_level:\n\npenguins |&gt; \n  ggplot(mapping = aes(x = flipper_length_mm,\n                       y = body_mass_g)) + \n  geom_point(aes(colour = bill_depth_mm),\n             na.rm = TRUE) +\n  geom_smooth(na.rm = TRUE)\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\nBut mapping to the global level gives a warning as the colour is also being applied to the geom_smoothand subsequently gets dropped:\n\npenguins |&gt; \n  ggplot(mapping = aes(x = flipper_length_mm,\n                       y = body_mass_g,\n                       colour = bill_depth_mm)) + \n  geom_point(na.rm = TRUE) +\n  geom_smooth(na.rm = TRUE)\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\nWarning: The following aesthetics were dropped during statistical transformation: colour\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\n\n\n\n\n\n\nRun this code in your head and predict what the output will look like. Then, run the code in R and check your predictions.\n\nThe chart will have dots with flipper length along the bottom and body mass along the side. The dots will be coloured by the islands and there will be as many curvy lines as there are distinct islands but with no grey extensions/bits to the lines.\n\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g, color = island)\n) +\n  geom_point() +\n  geom_smooth(se = FALSE)\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\nWill these two graphs look different? Why/why not?\n\nThey are the same because the first has the data and aes() which will be available to the geom() functions. The second is a repetition of the code leaving the global ggplot() empty but giving the same chart.\n\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g)\n) +\n  geom_point() +\n  geom_smooth()\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\nggplot() +\n  geom_point(\n    data = penguins,\n    mapping = aes(x = flipper_length_mm, y = body_mass_g)\n  ) +\n  geom_smooth(\n    data = penguins,\n    mapping = aes(x = flipper_length_mm, y = body_mass_g)\n  )\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_smooth()`).\nRemoved 2 rows containing missing values (`geom_point()`)."
  },
  {
    "objectID": "data-visualize.html#section-1",
    "href": "data-visualize.html#section-1",
    "title": "2  Data visualization",
    "section": "2.4.3",
    "text": "2.4.3\n\n\nMake a bar plot of species of penguins, where you assign species to the y aesthetic. How is this plot different?\n\n\nThe plot appears to be ‘flipped’ so the species are appearing on the left side (y axis).\n\nggplot(data = penguins,\n       aes(y = species))+\n  geom_bar()\n\n\n\n\nThis used to be done previously using coord_flip() which is still in {ggplot2}.\n\n\nHow are the following two plots different? Which aesthetic, color or fill, is more useful for changing the color of bars?\n\n\n\nggplot(penguins, aes(x = species)) +\n  geom_bar(color = \"red\")\n\nggplot(penguins, aes(x = species)) +\n  geom_bar(fill = \"red\")\n\n\n\nWhat does the bins argument in geom_histogram() do?\n\n\n\nggplot(penguins, aes(x = body_mass_g)) +\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_bin()`).\n\n\n\n\n\nBins represents the number of “buckets” that data is cut into, automatically this is 30.\nTo remove the warning message:\n\nggplot(penguins, aes(x = body_mass_g)) +\n  geom_histogram(bins = 10,\n                 na.rm = TRUE)\n\n\n\n\n\n\nMake a histogram of the carat variable in the diamonds dataset that is available when you load the tidyverse package. Experiment with different binwidths. What binwidth reveals the most interesting patterns?\n\n\n\nggplot(diamonds, aes(x = carat)) +\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nBins changes the “buckets” or the number of cuts made to the data:\n\nggplot(diamonds, aes(x = carat)) +\n  geom_histogram(bins = 3)\n\n\n\n\nWhilst binwidth changes the size of the bin, cuts or “buckets”:\n\nggplot(diamonds, aes(x = carat)) +\n  geom_histogram(binwidth = 0.5)"
  },
  {
    "objectID": "data-visualize.html#section-2",
    "href": "data-visualize.html#section-2",
    "title": "2  Data visualization",
    "section": "2.5.5",
    "text": "2.5.5\n\n\nThe mpg data frame that is bundled with the ggplot2 package contains 234 observations collected by the US Environmental Protection Agency on 38 car models. Which variables in mpg are categorical?\n\n\nTo see the data types you could use summary() or str() for structure:\n\nstr(ggplot2::mpg)\n\ntibble [234 × 11] (S3: tbl_df/tbl/data.frame)\n $ manufacturer: chr [1:234] \"audi\" \"audi\" \"audi\" \"audi\" ...\n $ model       : chr [1:234] \"a4\" \"a4\" \"a4\" \"a4\" ...\n $ displ       : num [1:234] 1.8 1.8 2 2 2.8 2.8 3.1 1.8 1.8 2 ...\n $ year        : int [1:234] 1999 1999 2008 2008 1999 1999 2008 1999 1999 2008 ...\n $ cyl         : int [1:234] 4 4 4 4 6 6 6 4 4 4 ...\n $ trans       : chr [1:234] \"auto(l5)\" \"manual(m5)\" \"manual(m6)\" \"auto(av)\" ...\n $ drv         : chr [1:234] \"f\" \"f\" \"f\" \"f\" ...\n $ cty         : int [1:234] 18 21 20 21 16 18 18 18 16 20 ...\n $ hwy         : int [1:234] 29 29 31 30 26 26 27 26 25 28 ...\n $ fl          : chr [1:234] \"p\" \"p\" \"p\" \"p\" ...\n $ class       : chr [1:234] \"compact\" \"compact\" \"compact\" \"compact\" ...\n\n\nCategorical would be chr or character type so that would be manufacture, model, trans, drv, fl and class.\n\nWhich variables are numerical? (Hint: Type ?mpg to read the documentation for the dataset.) How can you see this information when you run mpg?\n\nNumerical is listed as int for integer or num for number and that would be displ, year, cyl, cty and hwy.\n\n\nMake a scatterplot of hwy vs. displ using the mpg data frame. Next, map a third, numerical variable to color, then size, then both color and size, then shape. How do these aesthetics behave differently for categorical vs. numerical variables?\n\n\nIn the scatterplot of hwy vs. displ, what happens if you map a third variable to linewidth?\n\n\nWhat happens if you map the same variable to multiple aesthetics?\n\n\nMake a scatterplot of bill_depth_mm vs. bill_length_mm and color the points by species. What does adding coloring by species reveal about the relationship between these two variables? What about faceting by species?\n\n\nWhy does the following yield two separate legends? How would you fix it to combine the two legends?\n\n\n\nggplot(\n  data = penguins,\n  mapping = aes(\n    x = bill_length_mm, y = bill_depth_mm, \n    color = species, shape = species\n  )\n) +\n  geom_point() +\n  labs(color = \"Species\")\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\nCreate the two following stacked bar plots. Which question can you answer with the first one? Which question can you answer with the second one?\n\n\n\nggplot(penguins, aes(x = island, fill = species)) +\n  geom_bar(position = \"fill\")\n\n\n\nggplot(penguins, aes(x = species, fill = island)) +\n  geom_bar(position = \"fill\")"
  },
  {
    "objectID": "data-visualize.html#section-3",
    "href": "data-visualize.html#section-3",
    "title": "2  Data visualization",
    "section": "2.6.1",
    "text": "2.6.1\n\n\nRun the following lines of code. Which of the two plots is saved as mpg-plot.png? Why?\n\n\n\nggplot(mpg, aes(x = class)) +\n  geom_bar()\nggplot(mpg, aes(x = cty, y = hwy)) +\n  geom_point()\nggsave(\"mpg-plot.png\")\n\nThe second code is saved because it was the last code run.\n\n\nWhat do you need to change in the code above to save the plot as a PDF instead of a PNG? How could you find out what types of image files would work in ggsave()?\n\n\nTo save as a pdf the code needs to be changed from .png to .pdf:\n\nggsave(\"mpg-plot.pdf\")"
  },
  {
    "objectID": "workflow.html#section",
    "href": "workflow.html#section",
    "title": "3  Workflow: basics",
    "section": "3.5",
    "text": "3.5\n\n\nWhy does this code not work?\n\n\n\nmy_variable &lt;- 10\nmy_varıable\n\nError in eval(expr, envir, enclos): object 'my_varıable' not found\n\n\nThe i is dotless in the call of my_variable and so doesn’t match.\n\n\n\n\n\n\nQuarto chunk error: true\n\n\n\n\n\nIn Quarto this chunk ran using error: true which shows the error in the book, useful for instances where code errors are shared in Quarto presentations or on websites!\n\n\n\n\n\nTweak each of the following R commands so that they run correctly:\n\n\n\nlibary(todyverse)\n\nggplot(dTA = mpg) + \n  geom_point(maping = aes(x = displ y = hwy)) +\n  geom_smooth(method = \"lm)\n\nCorrected:\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy)) +\n  geom_smooth(mapping = aes(x = displ, y = hwy),\n              method = lm)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nThere are a lot of corrections needed in this code. It includes:\n\ntodyverse should be tidyverse)\ndTA instead of data)\nmaping instead of mapping\nmissing , between x = displ and y = hwy\na \" before \"lm\n\n\n\n\n\n\n\nQuotations around the lm in method = (note)\n\n\n\n\n\n\"lm\" will work but RStudio will flash up an error in the margin saying unexpected token if you click on the red circle with white cross.\n\n\n\n\ngeom_smooth() also requires its own mapping information as the aes() isn’t available to that line. If this were global it would be:\n\n\nlibrary(tidyverse)\n\nggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + \n  geom_point() +\n  geom_smooth(method = lm)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\nPress Option + Shift + K / Alt + Shift + K. What happens?\n\n\nThe keyboard shortcuts overlay menu comes up in RStudio.\n\nHow can you get to the same place using the menus?\n\nTools/Keyboards Shortcuts Help\n\n\nLet’s revisit an exercise from the https://r4ds.hadley.nz/data-visualize#sec-ggsave. Run the following lines of code.\n\n\n\nmy_bar_plot &lt;- ggplot(mpg, aes(x = class)) +\n geom_bar()\nmy_scatter_plot &lt;- ggplot(mpg, aes(x = cty, y = hwy)) +\n geom_point()\nggsave(filename = \"mpg-plot.png\", plot = my_bar_plot)\n\n\nWhich of the two plots is saved as mpg-plot.png?\n\nThe bar plot from the object my_bar_plot is saved.\n\nWhy?\n\nThis has been explicitly detailed in the ggsave() function. Both plots are also saved as objects (https://r4ds.hadley.nz/workflow-basics#sec-whats-in-a-name) so they can be referred to in the function."
  }
]