# Data visualization

The pipe is introduced in [Chapter 5](https://r4ds.hadley.nz/workflow-style.html#sec-pipes) but for these early chapter our solutions will include it! 

## [2.2.5](https://r4ds.hadley.nz/data-visualize.html#exercises) {.unnumbered}

1.
> How many rows are in `penguins`?  
> How many columns?

```{r}
#| warning: false
library(palmerpenguins)
library(tidyverse)

```

It's possible to see the number of rows and columns by typing:

```{r}
glimpse(penguins)
```

but to get a code output:

```{r}
nrow(penguins)
ncol(penguins)
```

and to find the dimensions of an object (the columns and rows):

```{r}
dim(penguins)
```

2.
> What does the `bill_depth_mm` variable in the `penguins` data frame describe?
Read the help for `?penguins` to find out.

There is a nice description and picture on [Allison Horst's](https://github.com/allisonhorst/palmerpenguins#bill-dimensions) GitHub.

3.
>Make a scatterplot of `bill_depth_mm` vs. `bill_length_mm`.
That is, make a scatterplot with `bill_depth_mm` on the y-axis and `bill_length_mm` on the x-axis.
Describe the relationship between these two variables.

Because this pipes the data into the chart the parameter `data = penguins` is redundant. 
It is commented out just to show where it would be if it hadn't been piped. 
By piping the data into the plotting code it means that if you type x = then tab you get a list of the potential columns you can use in the code.

```{r}
penguins |> 
  ggplot(#data = penguins, 
    mapping = aes(x = bill_depth_mm,
                  y = bill_length_mm)) +
  geom_point()
```


4.
>What happens if you make a scatterplot of `species` vs. `bill_depth_mm`?

When deciding which data is plotted on the y the [suggestion](https://sciencing.com/proper-way-label-graph-5195234.html) is often to put the first on the y. 
The following could be either way but it does make it easier to read the species names if they are on the y axis.

```{r}
penguins |> 
  ggplot(#data = penguins,
    mapping = aes(x = bill_depth_mm,
                  y = species)) +
  geom_point()
```

>What might be a better choice of geom?

Density plots with a coloured line, this could be replaced with `fill = species` to move from the line to a more solid chart.

_linewidth isn't mentioned in the R4DS and in some code may be lwd or size (although that is deprecated)_

```{r}
penguins |> 
  ggplot(#data = penguins,
         mapping = aes(x = bill_depth_mm,
                       colour = species)) +
  geom_density(linewidth = 2)
```

Or a boxplot:

```{r}
penguins |> 
  ggplot(#data = penguins,
    mapping = aes(x = bill_depth_mm,
                  fill = species)) +
  geom_boxplot()
```

5.
>Why does the following give an error and how would you fix it?

```{r}
#| eval: false
ggplot(data = penguins) + 
geom_point()
```

Gives the following error:

```r
Error in `geom_point()`:
! Problem while setting up geom.
â„¹ Error occurred in the 1st layer.
Caused by error in `compute_geom_1()`:
! `geom_point()` requires the following missing
  aesthetics: x and y
Run `rlang::last_trace()` to see where the error occurred.
```
The error is pointing out there are no aesthetics added, including x and y axis information.

```{r}
penguins |> 
  ggplot(mapping = aes(x = bill_depth_mm,
                       y = body_mass_g)) + 
  geom_point()
```

6.
>What does the `na.rm` argument do in `geom_point()`?
>What is the default value of the argument?
Create a scatterplot where you successfully use this argument set to `TRUE`.

There are missing data points (either on the x or the y) so gives a warning in the console along with the plotted chart:

>Warning message:
Removed 2 rows containing missing values (`geom_point()`).

It is saying that the missing value data is dropped.

Adding `na.rm = TRUE` into the `geom_point()` removes these missing value data poins and so there is no longer a warning printed in the console.

The default value of `na.rm =` is `FALSE`.

```{r}
penguins |> 
  ggplot(mapping = aes(x = bill_depth_mm,
                       y = body_mass_g)) + 
  geom_point(na.rm = TRUE)
```

7.
>Add the following caption to the plot you made in the previous exercise: "Data come from the palmerpenguins package." 
Hint: Take a look at the documentation for `labs()`.

```{r}
penguins |> 
  ggplot(mapping = aes(x = bill_depth_mm,
                       y = body_mass_g)) + 
  geom_point(na.rm = TRUE) + 
  labs(caption = "Data come from the palmerpenguins package.")
```

8.
>Recreate the following visualization.
What aesthetic should `bill_depth_mm` be mapped to?
And should it be mapped at the global level or at the geom level?

Mapped to the geom_level:

```{r}
penguins |> 
  ggplot(mapping = aes(x = flipper_length_mm,
                       y = body_mass_g)) + 
  geom_point(aes(colour = bill_depth_mm),
             na.rm = TRUE) +
  geom_smooth(na.rm = TRUE)

```

But mapping to the global level gives a warning as the colour is also being applied to the `geom_smooth`and subsequently gets dropped:

```{r}
penguins |> 
  ggplot(mapping = aes(x = flipper_length_mm,
                       y = body_mass_g,
                       colour = bill_depth_mm)) + 
  geom_point(na.rm = TRUE) +
  geom_smooth(na.rm = TRUE)

```

9.
Run this code in your head and predict what the output will look like. 
Then, run the code in R and check your predictions.

The chart will have dots with flipper length along the bottom and body mass along the side. 
The dots will be coloured by the islands and there will be as many curvy lines as there are distinct islands but with no grey extensions/bits to the lines.

```{r}
ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g, color = island)
) +
  geom_point() +
  geom_smooth(se = FALSE)
```


10. 
Will these two graphs look different? Why/why not?

They are the same because the first has the data and `aes()` which will be available to the `geom()` functions. 
The second is a repetition of the code leaving the global `ggplot()` empty but giving the same chart.

```{r}
ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
  geom_point() +
  geom_smooth()

ggplot() +
  geom_point(
    data = penguins,
    mapping = aes(x = flipper_length_mm, y = body_mass_g)
  ) +
  geom_smooth(
    data = penguins,
    mapping = aes(x = flipper_length_mm, y = body_mass_g)
  )
```

## [2.4.3](https://r4ds.hadley.nz/data-visualize.html#exercises-1) {.unnumbered}

1.  
>Make a bar plot of `species` of `penguins`, where you assign `species` to the `y` aesthetic.
How is this plot different?

The plot appears to be 'flipped' so the species are appearing on the left side (y axis).

```{r}
ggplot(data = penguins,
       aes(y = species))+
  geom_bar()
```

This used to be done previously using `coord_flip()` which is still in {ggplot2}.

2.  
>How are the following two plots different?
Which aesthetic, `color` or `fill`, is more useful for changing the color of bars?

```{r}
#| eval: false

ggplot(penguins, aes(x = species)) +
  geom_bar(color = "red")

ggplot(penguins, aes(x = species)) +
  geom_bar(fill = "red")
```

3.  
>What does the `bins` argument in `geom_histogram()` do?

```{r}
ggplot(penguins, aes(x = body_mass_g)) +
  geom_histogram()
```

Bins represents the number of "buckets" that data is cut into, automatically this is 30.

To remove the warning message:

```{r}
ggplot(penguins, aes(x = body_mass_g)) +
  geom_histogram(bins = 10,
                 na.rm = TRUE)
```

4.  
>Make a histogram of the `carat` variable in the `diamonds` dataset that is available when you load the tidyverse package.
Experiment with different binwidths.
What binwidth reveals the most interesting patterns?


```{r}
ggplot(diamonds, aes(x = carat)) +
  geom_histogram()
```

Bins changes the "buckets" or the number of cuts made to the data:

```{r}
ggplot(diamonds, aes(x = carat)) +
  geom_histogram(bins = 3)
```

Whilst binwidth changes the size of the bin, cuts or "buckets":

```{r}
ggplot(diamonds, aes(x = carat)) +
  geom_histogram(binwidth = 0.5)
```


## [2.5.5](https://r4ds.hadley.nz/data-visualize.html#exercises-2) {.unnumbered}

1.  
> The `mpg` data frame that is bundled with the ggplot2 package contains 234 observations collected by the US Environmental Protection Agency on 38 car models. 
Which variables in mpg are categorical? 

To see the data types you could use `summary()` or `str()` for structure:

```{r}
str(ggplot2::mpg)
```

Categorical would be chr or character type so that would be manufacture, model, trans, drv, fl and class.


> Which variables are numerical? 
(Hint: Type `?mpg` to read the documentation for the dataset.) 
How can you see this information when you run `mpg`?

Numerical is listed as int for integer or num for number and that would be displ, year, cyl, cty and hwy.

2.
> Make a scatterplot of `hwy` vs. `displ` using the mpg data frame. Next, map a third, numerical variable to `color`, then `size`, then both `color` and `size`, then `shape.` 
How do these aesthetics behave differently for categorical vs. numerical variables?

3.
> In the scatterplot of `hwy` vs. `displ`, what happens if you map a third variable to linewidth?

4.
> What happens if you map the same variable to multiple aesthetics?

5.
> Make a scatterplot of `bill_depth_mm` vs. `bill_length_mm` and color the points by species. 
What does adding coloring by `species` reveal about the relationship between these two variables? 
What about faceting by `species`?

6.
> Why does the following yield two separate legends? 
How would you fix it to combine the two legends?

```{r}
ggplot(
  data = penguins,
  mapping = aes(
    x = bill_length_mm, y = bill_depth_mm, 
    color = species, shape = species
  )
) +
  geom_point() +
  labs(color = "Species")

```

7.
> Create the two following stacked bar plots. 
Which question can you answer with the first one? 
Which question can you answer with the second one?

```{r}
ggplot(penguins, aes(x = island, fill = species)) +
  geom_bar(position = "fill")
ggplot(penguins, aes(x = species, fill = island)) +
  geom_bar(position = "fill")
```

## [2.6.1](https://r4ds.hadley.nz/data-visualize.html#exercises-3) {.unnumbered}

1.
> Run the following lines of code. Which of the two plots is saved as `mpg-plot.png`? 
Why?

```{r}
#| eval: false
ggplot(mpg, aes(x = class)) +
  geom_bar()
ggplot(mpg, aes(x = cty, y = hwy)) +
  geom_point()
ggsave("mpg-plot.png")
```

The second code is saved because it was the last code run.

2.
> What do you need to change in the code above to save the plot as a PDF instead of a PNG? 
How could you find out what types of image files would work in `ggsave()`?

To save as a pdf the code needs to be changed from `.png` to `.pdf`:

```{r}
#| eval: false
ggsave("mpg-plot.pdf")
```
